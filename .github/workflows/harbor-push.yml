name: Build and Push Images to Harbor

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: harbor-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Derive tags
        id: vars
        shell: bash
        run: |
          set -euo pipefail
          # Sanitize registry (strip scheme and trailing slash)
          REGISTRY_RAW='${{ secrets.HARBOR_REGISTRY }}'
          REGISTRY="${REGISTRY_RAW#http://}"
          REGISTRY="${REGISTRY#https://}"
          REGISTRY="${REGISTRY%/}"

          # Sanitize username (remove any stray newlines/CR)
          USERNAME_RAW='${{ secrets.HARBOR_USERNAME }}'
          USERNAME_CLEAN=$(printf '%s' "${USERNAME_RAW}" | tr -d '\r\n')

          PROJECT='${{ secrets.HARBOR_PROJECT }}'
          IMAGE_API="${REGISTRY}/${PROJECT}/gin-api"
          IMAGE_FRONTEND="${REGISTRY}/${PROJECT}/frontend"
          REF="${GITHUB_REF}"
          SHA_TAG="sha-${GITHUB_SHA::7}"
          TAGS_API=""
          TAGS_FE=""
          if [[ "$REF" == refs/heads/main ]]; then
            TAGS_API+="${IMAGE_API}:latest,${IMAGE_API}:${SHA_TAG}"
            TAGS_FE+="${IMAGE_FRONTEND}:latest,${IMAGE_FRONTEND}:${SHA_TAG}"
            echo "push=true" >> "$GITHUB_OUTPUT"
          elif [[ "$REF" == refs/tags/* ]]; then
            VERSION_TAG="${REF#refs/tags/}"
            TAGS_API+="${IMAGE_API}:${VERSION_TAG}"
            TAGS_FE+="${IMAGE_FRONTEND}:${VERSION_TAG}"
            echo "push=true" >> "$GITHUB_OUTPUT"
          else
            # PRs and feature branches: build only, no push
            BRANCH_SAFE=$(echo "${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" | tr '/' '-')
            TAGS_API+="${IMAGE_API}:${BRANCH_SAFE}-${SHA_TAG}"
            TAGS_FE+="${IMAGE_FRONTEND}:${BRANCH_SAFE}-${SHA_TAG}"
            echo "push=false" >> "$GITHUB_OUTPUT"
          fi
          echo "api_tags=${TAGS_API}" >> "$GITHUB_OUTPUT"
          echo "fe_tags=${TAGS_FE}" >> "$GITHUB_OUTPUT"
          echo "registry=${REGISTRY}" >> "$GITHUB_OUTPUT"
          echo "username=${USERNAME_CLEAN}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Harbor
        if: steps.vars.outputs.push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.vars.outputs.registry }}
          username: ${{ steps.vars.outputs.username }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Build gin-api image
        uses: docker/build-push-action@v5
        with:
          context: ./gin-api
          file: ./gin-api/Dockerfile
          push: ${{ steps.vars.outputs.push == 'true' }}
          tags: ${{ steps.vars.outputs.api_tags }}
          cache-from: type=gha,scope=gin-api
          cache-to: type=gha,mode=max,scope=gin-api

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: ${{ steps.vars.outputs.push == 'true' }}
          tags: ${{ steps.vars.outputs.fe_tags }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend
